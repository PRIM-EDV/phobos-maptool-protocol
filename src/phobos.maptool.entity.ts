// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.21.12
// source: phobos.maptool.entity.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "phobos.maptool";

export enum MapEntityDtoType {
  TYPE_UNDEFINED = 0,
  TYPE_FOE = 1,
  TYPE_FRIEND = 2,
  TYPE_OBJECT = 3,
  UNRECOGNIZED = -1,
}

export function mapEntityDtoTypeFromJSON(object: any): MapEntityDtoType {
  switch (object) {
    case 0:
    case "TYPE_UNDEFINED":
      return MapEntityDtoType.TYPE_UNDEFINED;
    case 1:
    case "TYPE_FOE":
      return MapEntityDtoType.TYPE_FOE;
    case 2:
    case "TYPE_FRIEND":
      return MapEntityDtoType.TYPE_FRIEND;
    case 3:
    case "TYPE_OBJECT":
      return MapEntityDtoType.TYPE_OBJECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MapEntityDtoType.UNRECOGNIZED;
  }
}

export function mapEntityDtoTypeToJSON(object: MapEntityDtoType): string {
  switch (object) {
    case MapEntityDtoType.TYPE_UNDEFINED:
      return "TYPE_UNDEFINED";
    case MapEntityDtoType.TYPE_FOE:
      return "TYPE_FOE";
    case MapEntityDtoType.TYPE_FRIEND:
      return "TYPE_FRIEND";
    case MapEntityDtoType.TYPE_OBJECT:
      return "TYPE_OBJECT";
    case MapEntityDtoType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MapEntityDtoStatus {
  ENTITY_STATUS_UNDEFINED = 0,
  ENTITY_STATUS_REGULAR = 1,
  ENTITY_STATUS_COMBAT = 2,
  UNRECOGNIZED = -1,
}

export function mapEntityDtoStatusFromJSON(object: any): MapEntityDtoStatus {
  switch (object) {
    case 0:
    case "ENTITY_STATUS_UNDEFINED":
      return MapEntityDtoStatus.ENTITY_STATUS_UNDEFINED;
    case 1:
    case "ENTITY_STATUS_REGULAR":
      return MapEntityDtoStatus.ENTITY_STATUS_REGULAR;
    case 2:
    case "ENTITY_STATUS_COMBAT":
      return MapEntityDtoStatus.ENTITY_STATUS_COMBAT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MapEntityDtoStatus.UNRECOGNIZED;
  }
}

export function mapEntityDtoStatusToJSON(object: MapEntityDtoStatus): string {
  switch (object) {
    case MapEntityDtoStatus.ENTITY_STATUS_UNDEFINED:
      return "ENTITY_STATUS_UNDEFINED";
    case MapEntityDtoStatus.ENTITY_STATUS_REGULAR:
      return "ENTITY_STATUS_REGULAR";
    case MapEntityDtoStatus.ENTITY_STATUS_COMBAT:
      return "ENTITY_STATUS_COMBAT";
    case MapEntityDtoStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MapEntityDto {
  id: string;
  type: MapEntityDtoType;
  position: MapEntityDto_Position | undefined;
  squad?: MapEntityDto_Squad | undefined;
  enemy?: MapEntityDto_Enemy | undefined;
  objective?: MapEntityDto_Objective | undefined;
  notes: string;
  symbol: number;
}

export interface MapEntityDto_Squad {
  name: string;
  callsign: string;
  trackerId: number;
  combattants: number;
  status: MapEntityDtoStatus;
}

export interface MapEntityDto_Enemy {
  combattants: number;
}

export interface MapEntityDto_Objective {
  name: string;
  description: string;
}

export interface MapEntityDto_Position {
  x: number;
  y: number;
}

export interface DeleteMapEntity {
  request?: DeleteMapEntity_Request | undefined;
  response?: DeleteMapEntity_Response | undefined;
  error?: string | undefined;
}

export interface DeleteMapEntity_Request {
  entity: MapEntityDto | undefined;
}

export interface DeleteMapEntity_Response {
}

export interface SetMapEntity {
  request?: SetMapEntity_Request | undefined;
  response?: SetMapEntity_Response | undefined;
  error?: string | undefined;
}

export interface SetMapEntity_Request {
  entity: MapEntityDto | undefined;
}

export interface SetMapEntity_Response {
}

export interface GetAllMapEntities {
  request?: GetAllMapEntities_Request | undefined;
  response?: GetAllMapEntities_Response | undefined;
  error?: string | undefined;
}

export interface GetAllMapEntities_Request {
}

export interface GetAllMapEntities_Response {
  entities: MapEntityDto[];
}

function createBaseMapEntityDto(): MapEntityDto {
  return {
    id: "",
    type: 0,
    position: undefined,
    squad: undefined,
    enemy: undefined,
    objective: undefined,
    notes: "",
    symbol: 0,
  };
}

export const MapEntityDto = {
  encode(message: MapEntityDto, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.position !== undefined) {
      MapEntityDto_Position.encode(message.position, writer.uint32(26).fork()).ldelim();
    }
    if (message.squad !== undefined) {
      MapEntityDto_Squad.encode(message.squad, writer.uint32(34).fork()).ldelim();
    }
    if (message.enemy !== undefined) {
      MapEntityDto_Enemy.encode(message.enemy, writer.uint32(42).fork()).ldelim();
    }
    if (message.objective !== undefined) {
      MapEntityDto_Objective.encode(message.objective, writer.uint32(50).fork()).ldelim();
    }
    if (message.notes !== "") {
      writer.uint32(58).string(message.notes);
    }
    if (message.symbol !== 0) {
      writer.uint32(64).int32(message.symbol);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapEntityDto {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapEntityDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.position = MapEntityDto_Position.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.squad = MapEntityDto_Squad.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.enemy = MapEntityDto_Enemy.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.objective = MapEntityDto_Objective.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.notes = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.symbol = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapEntityDto {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? mapEntityDtoTypeFromJSON(object.type) : 0,
      position: isSet(object.position) ? MapEntityDto_Position.fromJSON(object.position) : undefined,
      squad: isSet(object.squad) ? MapEntityDto_Squad.fromJSON(object.squad) : undefined,
      enemy: isSet(object.enemy) ? MapEntityDto_Enemy.fromJSON(object.enemy) : undefined,
      objective: isSet(object.objective) ? MapEntityDto_Objective.fromJSON(object.objective) : undefined,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
      symbol: isSet(object.symbol) ? globalThis.Number(object.symbol) : 0,
    };
  },

  toJSON(message: MapEntityDto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = mapEntityDtoTypeToJSON(message.type);
    }
    if (message.position !== undefined) {
      obj.position = MapEntityDto_Position.toJSON(message.position);
    }
    if (message.squad !== undefined) {
      obj.squad = MapEntityDto_Squad.toJSON(message.squad);
    }
    if (message.enemy !== undefined) {
      obj.enemy = MapEntityDto_Enemy.toJSON(message.enemy);
    }
    if (message.objective !== undefined) {
      obj.objective = MapEntityDto_Objective.toJSON(message.objective);
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    if (message.symbol !== 0) {
      obj.symbol = Math.round(message.symbol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapEntityDto>, I>>(base?: I): MapEntityDto {
    return MapEntityDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapEntityDto>, I>>(object: I): MapEntityDto {
    const message = createBaseMapEntityDto();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? MapEntityDto_Position.fromPartial(object.position)
      : undefined;
    message.squad = (object.squad !== undefined && object.squad !== null)
      ? MapEntityDto_Squad.fromPartial(object.squad)
      : undefined;
    message.enemy = (object.enemy !== undefined && object.enemy !== null)
      ? MapEntityDto_Enemy.fromPartial(object.enemy)
      : undefined;
    message.objective = (object.objective !== undefined && object.objective !== null)
      ? MapEntityDto_Objective.fromPartial(object.objective)
      : undefined;
    message.notes = object.notes ?? "";
    message.symbol = object.symbol ?? 0;
    return message;
  },
};

function createBaseMapEntityDto_Squad(): MapEntityDto_Squad {
  return { name: "", callsign: "", trackerId: 0, combattants: 0, status: 0 };
}

export const MapEntityDto_Squad = {
  encode(message: MapEntityDto_Squad, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.callsign !== "") {
      writer.uint32(18).string(message.callsign);
    }
    if (message.trackerId !== 0) {
      writer.uint32(24).int32(message.trackerId);
    }
    if (message.combattants !== 0) {
      writer.uint32(32).int32(message.combattants);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapEntityDto_Squad {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapEntityDto_Squad();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.callsign = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.trackerId = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.combattants = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapEntityDto_Squad {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      callsign: isSet(object.callsign) ? globalThis.String(object.callsign) : "",
      trackerId: isSet(object.trackerId) ? globalThis.Number(object.trackerId) : 0,
      combattants: isSet(object.combattants) ? globalThis.Number(object.combattants) : 0,
      status: isSet(object.status) ? mapEntityDtoStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: MapEntityDto_Squad): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.callsign !== "") {
      obj.callsign = message.callsign;
    }
    if (message.trackerId !== 0) {
      obj.trackerId = Math.round(message.trackerId);
    }
    if (message.combattants !== 0) {
      obj.combattants = Math.round(message.combattants);
    }
    if (message.status !== 0) {
      obj.status = mapEntityDtoStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapEntityDto_Squad>, I>>(base?: I): MapEntityDto_Squad {
    return MapEntityDto_Squad.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapEntityDto_Squad>, I>>(object: I): MapEntityDto_Squad {
    const message = createBaseMapEntityDto_Squad();
    message.name = object.name ?? "";
    message.callsign = object.callsign ?? "";
    message.trackerId = object.trackerId ?? 0;
    message.combattants = object.combattants ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseMapEntityDto_Enemy(): MapEntityDto_Enemy {
  return { combattants: 0 };
}

export const MapEntityDto_Enemy = {
  encode(message: MapEntityDto_Enemy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.combattants !== 0) {
      writer.uint32(8).int32(message.combattants);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapEntityDto_Enemy {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapEntityDto_Enemy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.combattants = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapEntityDto_Enemy {
    return { combattants: isSet(object.combattants) ? globalThis.Number(object.combattants) : 0 };
  },

  toJSON(message: MapEntityDto_Enemy): unknown {
    const obj: any = {};
    if (message.combattants !== 0) {
      obj.combattants = Math.round(message.combattants);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapEntityDto_Enemy>, I>>(base?: I): MapEntityDto_Enemy {
    return MapEntityDto_Enemy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapEntityDto_Enemy>, I>>(object: I): MapEntityDto_Enemy {
    const message = createBaseMapEntityDto_Enemy();
    message.combattants = object.combattants ?? 0;
    return message;
  },
};

function createBaseMapEntityDto_Objective(): MapEntityDto_Objective {
  return { name: "", description: "" };
}

export const MapEntityDto_Objective = {
  encode(message: MapEntityDto_Objective, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapEntityDto_Objective {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapEntityDto_Objective();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapEntityDto_Objective {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: MapEntityDto_Objective): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapEntityDto_Objective>, I>>(base?: I): MapEntityDto_Objective {
    return MapEntityDto_Objective.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapEntityDto_Objective>, I>>(object: I): MapEntityDto_Objective {
    const message = createBaseMapEntityDto_Objective();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseMapEntityDto_Position(): MapEntityDto_Position {
  return { x: 0, y: 0 };
}

export const MapEntityDto_Position = {
  encode(message: MapEntityDto_Position, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapEntityDto_Position {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapEntityDto_Position();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapEntityDto_Position {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: MapEntityDto_Position): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapEntityDto_Position>, I>>(base?: I): MapEntityDto_Position {
    return MapEntityDto_Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MapEntityDto_Position>, I>>(object: I): MapEntityDto_Position {
    const message = createBaseMapEntityDto_Position();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseDeleteMapEntity(): DeleteMapEntity {
  return { request: undefined, response: undefined, error: undefined };
}

export const DeleteMapEntity = {
  encode(message: DeleteMapEntity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== undefined) {
      DeleteMapEntity_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
    }
    if (message.response !== undefined) {
      DeleteMapEntity_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteMapEntity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMapEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = DeleteMapEntity_Request.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = DeleteMapEntity_Response.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMapEntity {
    return {
      request: isSet(object.request) ? DeleteMapEntity_Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? DeleteMapEntity_Response.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: DeleteMapEntity): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = DeleteMapEntity_Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = DeleteMapEntity_Response.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMapEntity>, I>>(base?: I): DeleteMapEntity {
    return DeleteMapEntity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMapEntity>, I>>(object: I): DeleteMapEntity {
    const message = createBaseDeleteMapEntity();
    message.request = (object.request !== undefined && object.request !== null)
      ? DeleteMapEntity_Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? DeleteMapEntity_Response.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseDeleteMapEntity_Request(): DeleteMapEntity_Request {
  return { entity: undefined };
}

export const DeleteMapEntity_Request = {
  encode(message: DeleteMapEntity_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entity !== undefined) {
      MapEntityDto.encode(message.entity, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteMapEntity_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMapEntity_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = MapEntityDto.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMapEntity_Request {
    return { entity: isSet(object.entity) ? MapEntityDto.fromJSON(object.entity) : undefined };
  },

  toJSON(message: DeleteMapEntity_Request): unknown {
    const obj: any = {};
    if (message.entity !== undefined) {
      obj.entity = MapEntityDto.toJSON(message.entity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMapEntity_Request>, I>>(base?: I): DeleteMapEntity_Request {
    return DeleteMapEntity_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMapEntity_Request>, I>>(object: I): DeleteMapEntity_Request {
    const message = createBaseDeleteMapEntity_Request();
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? MapEntityDto.fromPartial(object.entity)
      : undefined;
    return message;
  },
};

function createBaseDeleteMapEntity_Response(): DeleteMapEntity_Response {
  return {};
}

export const DeleteMapEntity_Response = {
  encode(_: DeleteMapEntity_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteMapEntity_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMapEntity_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteMapEntity_Response {
    return {};
  },

  toJSON(_: DeleteMapEntity_Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMapEntity_Response>, I>>(base?: I): DeleteMapEntity_Response {
    return DeleteMapEntity_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMapEntity_Response>, I>>(_: I): DeleteMapEntity_Response {
    const message = createBaseDeleteMapEntity_Response();
    return message;
  },
};

function createBaseSetMapEntity(): SetMapEntity {
  return { request: undefined, response: undefined, error: undefined };
}

export const SetMapEntity = {
  encode(message: SetMapEntity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== undefined) {
      SetMapEntity_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
    }
    if (message.response !== undefined) {
      SetMapEntity_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetMapEntity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMapEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = SetMapEntity_Request.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = SetMapEntity_Response.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMapEntity {
    return {
      request: isSet(object.request) ? SetMapEntity_Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? SetMapEntity_Response.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: SetMapEntity): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = SetMapEntity_Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = SetMapEntity_Response.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMapEntity>, I>>(base?: I): SetMapEntity {
    return SetMapEntity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetMapEntity>, I>>(object: I): SetMapEntity {
    const message = createBaseSetMapEntity();
    message.request = (object.request !== undefined && object.request !== null)
      ? SetMapEntity_Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? SetMapEntity_Response.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseSetMapEntity_Request(): SetMapEntity_Request {
  return { entity: undefined };
}

export const SetMapEntity_Request = {
  encode(message: SetMapEntity_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entity !== undefined) {
      MapEntityDto.encode(message.entity, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetMapEntity_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMapEntity_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entity = MapEntityDto.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMapEntity_Request {
    return { entity: isSet(object.entity) ? MapEntityDto.fromJSON(object.entity) : undefined };
  },

  toJSON(message: SetMapEntity_Request): unknown {
    const obj: any = {};
    if (message.entity !== undefined) {
      obj.entity = MapEntityDto.toJSON(message.entity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMapEntity_Request>, I>>(base?: I): SetMapEntity_Request {
    return SetMapEntity_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetMapEntity_Request>, I>>(object: I): SetMapEntity_Request {
    const message = createBaseSetMapEntity_Request();
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? MapEntityDto.fromPartial(object.entity)
      : undefined;
    return message;
  },
};

function createBaseSetMapEntity_Response(): SetMapEntity_Response {
  return {};
}

export const SetMapEntity_Response = {
  encode(_: SetMapEntity_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetMapEntity_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMapEntity_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetMapEntity_Response {
    return {};
  },

  toJSON(_: SetMapEntity_Response): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMapEntity_Response>, I>>(base?: I): SetMapEntity_Response {
    return SetMapEntity_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetMapEntity_Response>, I>>(_: I): SetMapEntity_Response {
    const message = createBaseSetMapEntity_Response();
    return message;
  },
};

function createBaseGetAllMapEntities(): GetAllMapEntities {
  return { request: undefined, response: undefined, error: undefined };
}

export const GetAllMapEntities = {
  encode(message: GetAllMapEntities, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== undefined) {
      GetAllMapEntities_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
    }
    if (message.response !== undefined) {
      GetAllMapEntities_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllMapEntities {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllMapEntities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = GetAllMapEntities_Request.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.response = GetAllMapEntities_Response.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllMapEntities {
    return {
      request: isSet(object.request) ? GetAllMapEntities_Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? GetAllMapEntities_Response.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: GetAllMapEntities): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = GetAllMapEntities_Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = GetAllMapEntities_Response.toJSON(message.response);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllMapEntities>, I>>(base?: I): GetAllMapEntities {
    return GetAllMapEntities.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllMapEntities>, I>>(object: I): GetAllMapEntities {
    const message = createBaseGetAllMapEntities();
    message.request = (object.request !== undefined && object.request !== null)
      ? GetAllMapEntities_Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GetAllMapEntities_Response.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseGetAllMapEntities_Request(): GetAllMapEntities_Request {
  return {};
}

export const GetAllMapEntities_Request = {
  encode(_: GetAllMapEntities_Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllMapEntities_Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllMapEntities_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetAllMapEntities_Request {
    return {};
  },

  toJSON(_: GetAllMapEntities_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllMapEntities_Request>, I>>(base?: I): GetAllMapEntities_Request {
    return GetAllMapEntities_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllMapEntities_Request>, I>>(_: I): GetAllMapEntities_Request {
    const message = createBaseGetAllMapEntities_Request();
    return message;
  },
};

function createBaseGetAllMapEntities_Response(): GetAllMapEntities_Response {
  return { entities: [] };
}

export const GetAllMapEntities_Response = {
  encode(message: GetAllMapEntities_Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.entities) {
      MapEntityDto.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAllMapEntities_Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllMapEntities_Response();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.entities.push(MapEntityDto.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAllMapEntities_Response {
    return {
      entities: globalThis.Array.isArray(object?.entities)
        ? object.entities.map((e: any) => MapEntityDto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAllMapEntities_Response): unknown {
    const obj: any = {};
    if (message.entities?.length) {
      obj.entities = message.entities.map((e) => MapEntityDto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAllMapEntities_Response>, I>>(base?: I): GetAllMapEntities_Response {
    return GetAllMapEntities_Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAllMapEntities_Response>, I>>(object: I): GetAllMapEntities_Response {
    const message = createBaseGetAllMapEntities_Response();
    message.entities = object.entities?.map((e) => MapEntityDto.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
